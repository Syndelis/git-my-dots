#!/bin/bash
# ------------------------------------------------------------------------------
# AUXILIARY FUNCTIONS
# ------------------------------------------------------------------------------

GIT_FILES=""
fecth_git_files() {
    GIT_FILES=$(cd $1 && git ls-files | sed -e 's/^/A  /')
}

check_git_files() {
    ! [ -z "${GIT_FILES// }" ]
}

git_at() {
    [ -e "$1/.git" ]
}

is_dot_installed() {
    [ -e "$1/.git/hooks/pre-commit-target-dir" ]
}

PRECOMMIT_COMMAND=""
get_pre_commit() {

    if is_dot_installed $1; then
        PRECOMMIT_COMMAND="$1/.git/hooks/pre-commit"
        printf "$CYAN[Sync]$CLEAN Using previously installed $YELLOW$NAME$CLEAN instace \n"

    elif ! [ -z "$TARGET" ]; then
        echo "$TARGET" > "$PRECOMMIT-target-dir"
        PRECOMMIT_COMMAND="$PRECOMMIT"
        printf "$CYAN[Sync]$CLEAN Using one-time $YELLOW$NAME$CLEAN with Target $PURPLE$TARGET$CLEAN \n"

    fi

}

# ------------------------------------------------------------------------------
# GLOBALS & SUBCOMMANDS
# ------------------------------------------------------------------------------

VERSION="1.0"
NAME="git-my-dots"

BASE="\033"
CLEAN="$BASE[m"
BLACK="$BASE[30m"
RED="$BASE[31m"
GREEN="$BASE[32m"
YELLOW="$BASE[33m"
PURPLE="$BASE[34m"
PINK="$BASE[35m"
CYAN="$BASE[36m"

# dotfile help ---------------------------------------------
dot_help() {
printf "Usage: $PINK$NAME$CLEAN $YELLOW[--help,-h | --version,-v]$CLEAN $CYAN<command>$CLEAN $YELLOW[--source=.] [--target=..] [--force] [--safe]$CLEAN

COMMANDS
    ${CYAN}install$CLEAN\tInstalls $PINK$NAME$CLEAN on $YELLOW[sources]$CLEAN's ${PINK}Git$CLEAN repository
    ${CYAN}remove$CLEAN\tUninstalls $PINK$NAME$CLEAN $YELLOW[sources]$CLEAN's ${PINK}Git$CLEAN repository

    ${CYAN}sync$CLEAN\tSyncs $YELLOW[source]$CLEAN's files with $YELLOW[target]$CLEAN. $YELLOW[target]$CLEAN may be omitted if $PINK$NAME$CLEAN was already installed on $YELLOW[source]$CLEAN
    ${CYAN}unsync$CLEAN\tDangerous: deletes all of $YELLOW[source]$CLEAN's files that matches with $YELLOW[target]$CLEAN. $YELLOW[target]$CLEAN may be omitted if $PNIK$NAME$CLEAN was already installed on $YELLOW[source]$CLEAN

    ${CYAN}help$CLEAN\tPrints this message
    ${CYAN}version$CLEAN\tTells you this program's version ($VERSION, btw)\n
    
OPTIONS
    $YELLOW--source[=.]$CLEAN\tDirectory that contains the base dotfile repository. By default, it's the current directory
    $YELLOW--target[=..]$CLEAN\tDirectory that will be targeted for mirroring the dotfiles to
    
    $YELLOW--safe$CLEAN\t\tThis option will make so that no files are altered on disk, so it only prints the changes the command intended on making
    $YELLOW--force$CLEAN\t\tWhen running sync or install, will delete confliting files before re-syncing them. Do try it with --safe before actually doing it!

    $YELLOW--help,-h$CLEAN\t\tSame as the help command
    $YELLOW--version,-v$CLEAN\tSame as the version command\n"
}

# dotfiler install ------------------------------------------
dot_install() {
    
    if git_at $1; then

        fecth_git_files $1
        
        [ -z $SAFE_MODE ] && cp "$PRECOMMIT" "$1/.git/hooks/pre-commit" && echo "$TARGET" > "$1/.git/hooks/pre-commit-target-dir"

        if check_git_files; then
            printf "$YELLOW[Question]$CLEAN Do you want to sync the existing dotfiles [Y/n]?  \b"

            while true; do
                read answer

                case "$answer" in
                    "n" | "N") break ;;
                    "" | "y" | "Y")
                        dot_sync $1
                        break
                        ;;

                    *)
                        printf "$YELLOW[?]$CLEAN Option not recognized. [Y/n]?  \b"

                esac
            done
        fi

        printf "$GREEN[Success]$CLEAN Installed $PINK$NAME$CLEAN at $PURPLE$1$CLEAN\n"

    else
        printf "$RED[Error]$CLEAN Couldn't find a$PINK Git$CLEAN repository at $PURPLE$1$CLEAN\n"
    fi

}

# dotfiler remove -------------------------------------------
dot_remove() {
    
    if git_at $1; then
        if is_dot_installed $1; then
            [ -z $SAFE_MODE ] && rm -f "$1/.git/hooks/pre-commit" "$1/.git/hooks/pre-commit-target-dir"

            fecth_git_files $1
            if check_git_files; then
                printf "$YELLOW[Question]$CLEAN Do you want to unsync the leftover dotfiles [y/N]?  \b"

                while true; do
                    read answer

                    case "$answer" in
                        "" | "n" | "N") break ;;
                        "y" | "Y")
                            dot_unsync $1
                            break
                            ;;

                        *)
                            printf "$YELLOW[?]$CLEAN Option not recognized. [Y/n]?  \b"

                    esac
                done
            fi

            printf "$GREEN[Success]$CLEAN Removed $PINK$NAME$CLEAN at $PURPLE$1$CLEAN\n"

        else
            printf "$RED[Error]$CLEAN $PINK$NAME$CLEAN is not installed at $PURPLE$1$CLEAN\n"
        fi
    else
        printf "$RED[Error]$CLEAN $PURPLE$1$CLEAN is not a$PINK Git$CLEAN repository\n"
    fi

}

# dotfiler sync ---------------------------------------------
dot_sync() {

    if git_at $1; then
        ! check_git_files && fecth_git_files $1

        get_pre_commit $1

        if $IS_FORCED; then
            echo ""
            echo "$GIT_FILES" | sed 's/A  /D  /' | $PRECOMMIT_COMMAND $SAFE_MODE

        fi

        echo ""
        echo "$GIT_FILES" | $PRECOMMIT_COMMAND $SAFE_MODE

        printf "$GREEN[Success]$CLEAN Synchronized dotfiles with $PURPLE$1$CLEAN\n"
    
    else
        printf "$RED[Error]$CLEAN No$PINK Git$CLEAN repository at $PURPLE$1$CLEAN\n"
    fi
}


# dotfiler unsync -------------------------------------------
dot_unsync() {

    if git_at $1; then
        ! check_git_files && fecth_git_files $1

        get_pre_commit $1

        echo ""
        echo "$GIT_FILES" | sed 's/A  /D  /' | $PRECOMMIT_COMMAND $SAFE_MODE

        printf "$GREEN[Success]$CLEAN Deleted matching dotfiles of $PURPLE$1$CLEAN\n"

    else
        printf "$RED[Error]$CLEAN No$PINK Git$CLEAN repository at $PURPLE$1$CLEAN\n"

    fi

}

# dotfiler version -----------------------------------------
dot_version() {
    printf "$PINK$NAME$CLEAN version $PURPLE$VERSION$CLEAN\n"
}

# ------------------------------------------------------------------------------
# MAIN CODE
# ------------------------------------------------------------------------------

MY_DIR=$(dirname -- "$(readlink -f -- "$BASH_SOURCE")")
PRECOMMIT="$MY_DIR/hooks/pre-commit"
OPTS=$(getopt -o hv -l version,help,force,safe,source:,target: -n "$NAME" -- "$@")

HAS_HELP=false
HAS_VERSION=false

IS_FORCED=false
IS_SYMBOLIC=false
SAFE_MODE=""

NAMED_ARGUMENT=""
SUBCOMMAND=""
SOURCE="."
TARGET=".."

for opt in $OPTS
do
    case "$opt" in

        -v | --version) HAS_VERSION=true                ;;
        -h | --help)    HAS_HELP=true                   ;;

        --safe)         SAFE_MODE=" --safe"             ;;
        --force)        IS_FORCED=true                  ;;
        --source)       NAMED_ARGUMENT="SOURCE"         ;;
        --target)       NAMED_ARGUMENT="TARGET"         ;;
        --)             NAMED_ARGUMENT="SUBCOMMAND"     ;;

        *)
            val=$(echo $opt | tr -d "'")
            case "$NAMED_ARGUMENT" in
                "SOURCE")       SOURCE="$val"           ;;
                "TARGET")       TARGET="$val"           ;;
                "SUBCOMMAND")   SUBCOMMAND="$val"       ;;

                *)              HAS_HELP=true           ;;
            esac

    esac
done

! [ -z $SAFE_MODE ] && printf "[[ \033[21;36mSafe mode$CLEAN ]]\n"

if $HAS_VERSION; then
    dot_version

elif $HAS_HELP || [ -z $SUBCOMMAND ]; then
    dot_help

else
    dot_${SUBCOMMAND} $(readlink -f -- $SOURCE) $(readlink -f -- $TARGET)

fi